Day 5 — Initial Chatbot-to-Frontend Connection Testing
Overall Goal: Test the full end-to-end integration of the AI chatbot with the React frontend and refine initial user interactions.
Ammaar: Conducts end-to-end testing of the /chat endpoint with the React frontend to ensure messages are properly sent and received. He observes AI response times and identifies areas where prompt instructions may need refinement to provide clearer, NYC tenant-focused guidance. He documents any required changes for both prompt structure and backend logic.
David: Enhances the tenant_rights.json dataset by adding ten additional sample questions and answers relevant to NYC tenant laws. He verifies that the backend delivers responses consistently and correctly, both from the AI and from the fallback dataset. David also tests edge cases where a user query does not match any dataset entry to ensure graceful handling.
Ethan: Adds interactive features to the React frontend, such as automatically scrolling the chat window to show the latest message and displaying message status indicators (e.g., "Sending…" or "Delivered"). He checks that the frontend handles multiple sequential messages without breaking the UI and adjusts spacing and layout for readability.
Nikhil: Performs thorough testing of the complete flow by submitting dummy queries through the frontend and verifying the backend responses. He writes small scripts to simulate multiple users sending queries simultaneously and ensures that the backend handles concurrent requests without crashing. He also reviews console logs for any hidden errors or warnings.

Day 6 — “Ask for Help” Form Implementation
Overall Goal: Create the “Ask for Help” feature that allows users to submit questions or concerns to the backend, storing them safely in JSON for later review.
Ammaar: Creates the /help POST endpoint in Flask that accepts user submissions. He ensures proper field validation for name, email, and message content. He also handles error responses with clear JSON messages for missing or invalid data, and documents the endpoint in docs/api_spec.md.
David: Implements backend logic to append each new help request to help_requests.json. He writes validation helper functions (validate_email, validate_message) and ensures that data is persisted across server restarts. David also tests multiple submissions in sequence to ensure JSON structure is maintained and no data is lost.
Ethan: Designs the React form UI with inputs for name, email, and message. He adds a submit button that sends a POST request to /help. He also builds a confirmation banner that appears when the submission is successful, and inline error messages for invalid input.
Nikhil: Tests the full end-to-end flow: submits dummy data through the frontend, verifies JSON updates correctly, and checks console logs for errors. He also writes a small script to automate multiple test submissions and verifies backend stability under repeated requests.

Day 7 — Midpoint Review and Integration Testing
Overall Goal: Review progress across all modules, fix conflicts, and ensure frontend-backend integration works seamlessly.
Ammaar: Leads the team review, checking that all endpoints (/chat, /help, /resources, /rights) respond correctly. He merges all feature branches, resolves merge conflicts, and documents integration issues for the team.
David: Cleans up JSON data files (tenant_rights.json, resources.json, help_requests.json) to ensure consistent formatting and indentation. He adds any missing sample data and verifies that backend routes still function after cleanup.
Ethan: Polishes the UI for consistency in colors, fonts, and spacing. Ensures React components render properly on desktop and mobile. Implements minor enhancements like smooth scrolling in the chat and hover effects on resource cards.
Nikhil: Adds logging middleware to the Flask backend to track all incoming requests, including timestamps and routes. He tests the logging functionality by sending requests from the frontend and verifying logs capture the correct information.

Day 8 — AI Response Refinement
Overall Goal: Improve the AI chatbot’s output quality and integrate fallback mechanisms for offline or error responses.
Ammaar: Refines the AI system prompt for GPT to instruct it to provide NYC tenant-specific guidance in clear, plain English. Adds context about user’s possible questions and desired response format (short bullet points, concise explanations).
David: Implements fallback logic: if the GPT API call fails, the chatbot searches tenant_rights.json for relevant answers. He writes a helper function to match keywords and return appropriate fallback responses.
Ethan: Updates frontend chat interface with a loader animation while waiting for AI response. Adds a small tooltip explaining that answers are generated by AI and can reference official NYC tenant resources.
Nikhil: Refactors Flask backend routes using blueprints (chat.py, help.py, resources.py) for better modularity. Verifies that AI responses and fallback logic work correctly with all routes integrated.

Day 9 — Legal Language Simplification and Accessibility Enhancements
Overall Goal: Ensure that AI responses are clear, understandable, and the app interface is accessible to all users.
Ammaar: Reviews chatbot output to ensure clarity and plain-English phrasing. He edits system prompts and example messages to target an 8th-grade reading level. He also adds brief explanations for legal terminology so users can understand the content without prior legal knowledge.
David: Implements synonym handling and keyword normalization for fallback lookups in tenant_rights.json. He ensures that even if a user phrases a question differently, the system can still return accurate and relevant answers.
Ethan: Improves frontend accessibility by adding keyboard navigation, ARIA labels, focus indicators, and high-contrast options. He tests the layout on mobile and tablet viewports to ensure readability and usability across devices.
Nikhil: Runs cross-browser tests (Chrome, Firefox, Edge, Safari) and logs layout inconsistencies. Fixes issues with message overflow, collapsible cards, and form input alignment. Verifies that all routes and interactions remain functional after adjustments.

Day 10 — User Testing and Feedback Collection
Overall Goal: Conduct user testing sessions to identify usability issues and collect actionable feedback.
Ammaar: Organizes three user testing sessions with potential NYC tenants or community members. Records observations about navigation, chatbot clarity, and overall experience. Summarizes feedback for team discussion.
David: Monitors backend performance during testing, checking for errors, failed API calls, or invalid submissions. Implements fixes for any bugs discovered during user interaction.
Ethan: Updates frontend based on tester feedback, refining chat UI, input forms, and visual indicators. Adjusts spacing, font sizes, and color contrast for improved readability.
Nikhil: Monitors logs during user testing to identify backend failures or unexpected input errors. Writes unit tests replicating reported issues to prevent regressions. Ensures that fixes do not break existing functionality.

Day 11 — Deploy Demo Version
Overall Goal: Deploy both frontend and backend for public access and verify functionality in a live environment.
Ammaar: Deploys the Flask backend to Render, following documented steps. Ensures that all endpoints are publicly accessible and that CORS settings allow frontend communication.
David: Verifies that /chat, /help, /resources, and /rights routes function correctly in the deployed backend. Checks JSON persistence and validates API responses in the live environment.
Ethan: Deploys React frontend to Vercel, connecting to the deployed backend endpoints. Tests the app in multiple browsers to ensure consistent behavior.
Nikhil: Conducts live end-to-end testing, submitting messages through the chatbot, sending help requests, and retrieving resources. Logs and resolves any deployment-specific errors, and ensures the production environment mirrors local functionality.

Day 12 — Documentation and AI Behavior Review
Overall Goal: Prepare thorough documentation and refine AI behavior for clarity and accuracy.
Ammaar: Writes detailed setup instructions in docs/setup.md, including installation, running the backend/frontend locally, and configuration steps. Reviews AI prompt logic and adds notes on expected chatbot behavior.
David: Creates a data dictionary for all JSON files (tenant_rights.json, resources.json, help_requests.json) with field descriptions and example entries. Updates docs/api_spec.md with final endpoint descriptions.
Ethan: Captures annotated screenshots of the UI for documentation. Labels key features such as chat input, help form, resource cards, and collapsible rights panels.
Nikhil: Creates testing documentation with instructions for running unit tests, curl examples for API endpoints, and guidelines for validating chatbot responses. Ensures that all instructions are clear and reproducible.

Day 13 — Final Polish and Optimization
Overall Goal: Refine the app, finalize design, and optimize backend and frontend performance.
Ammaar: Reviews all AI responses for clarity, accuracy, and politeness. Adjusts prompts to emphasize NYC tenant laws and plain-English explanations.
David: Optimizes backend Flask routes by removing unnecessary imports, improving JSON handling efficiency, and ensuring stable response times. Verifies no debug prints remain in production code.
Ethan: Applies final design polish to React components. Ensures responsive layout, consistent typography, and cohesive color scheme. Adds subtle animations and hover effects for better user experience.
Nikhil: Verifies all backend and frontend functionality. Tests JSON files for corruption or load errors. Performs final commits, tags the project v1.0, and prepares backups for submission.

Day 14 — Submission Preparation, Demo Recording, and Final Review
Overall Goal: Prepare submission materials for the Congressional App Challenge and finalize project delivery.
Ammaar: Records a 2–3 minute demo video showcasing key features of the app. Explains each team member’s contributions and highlights the app’s social impact.
David: Conducts final backend validation, ensuring all endpoints function under realistic load. Tests fallback logic for AI responses and JSON file integrity.
Ethan: Takes final screenshots of all app pages, including the chat interface, rights page, and help form. Prepares visual assets for submission documents.
Nikhil: Packages the full project into a ZIP archive, ensuring all code, JSON data, and documentation are included. Writes a submission summary with project description, setup instructions, and GitHub repository link. Confirms that all challenge requirements are satisfied.


